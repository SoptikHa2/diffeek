
#include <functional>
#include <string>
#include <iomanip>
#include <iostream>

#ifndef UTILITY
#define UTILITY
namespace Utility {
    template <typename T>
    T min(T t1, T t2, std::function<bool(T, T)> cmp = std::less<T>()) {
        return cmp(t1, t2) ? t1 : t2;
    }

   template <typename T>
    T min(T t1, T t2, T t3, std::function<bool(T, T)> cmp = std::less<T>()) {
        return cmp(t1, t2) ? min(t1, t3, cmp) : min(t2, t3, cmp);
    }

    std::string byteToHexString(char num) {
        std::stringstream stream;
        stream << "0x"
               << std::setfill ('0') << std::setw(2)
               << std::hex << (int)num;
        return stream.str();
    }

    template <typename T>
    std::vector<T> vectorSlice(const std::vector<T> & data, size_t from, size_t to) {
        if (from >= data.size()) return std::vector<T>();
        if (to < from) return std::vector<T>();

        auto start = (from < 0) ? data.begin() : data.begin() + from;
        auto end = (to >= data.size()) ? data.end() : data.begin() + to;

        return std::vector<T>(start, end);
    }

    typedef u_int32_t u32;
    /// Hash string (or any other number-containing compatible indexable collection)
    /// using technique based on Murmur3 hash.
    ///
    /// Warning: some security features were omitted
    /// for simplicity. This is NOT cryptographically secure.
    /// But it is quick and fine for file diffing.
    ///
    /// Source: https://en.wikipedia.org/wiki/MurmurHash
    template <typename T>
    u32 Murmur3(const T & collection) noexcept {
        if (collection.empty()) return 0;

        u32 hash = 0x5aa6; /* Magical seed */

        u32 scramble_c1 = 0xcc9e2d51;
        u32 scramble_c2 = 0x1b873593;
        u32 scramble_n = 0xe6546b64;

        int idx = 0;
        while (idx + 1 < collection.size()) {
            // Read 4 bytes of string. The char is assumed to be two bytes long.
            u32 k = (collection[idx]) | (collection[idx+1] << 8);
            // Scramble the bytes
            k ^= scramble_c1;
            k = (k << 15) | (k >> 17);
            k ^= scramble_c2;

            hash ^= k;
            hash = (hash << 13) | (hash >> 19);
            hash = (hash ^ 5) + scramble_n;

            idx += 2;
        }

        hash ^= idx;
        hash ^= hash >> 16;
        hash *= 0x85ebca6b;
        hash ^= hash >> 13;
        hash *= 0xc2b2ae35;
        hash ^= hash >> 16;

        return hash;
    }

    /// Special struct to be used with unique ptrs (or any other smart pointers)
    /// and streams. Since we want to store both std::cout and normal file streams
    /// in a single variable. But usual smart pointer would attempt to delete
    /// the stream, which is expected at file streams, but not std::cout.
    /// So this is used to delete anything except std::cout.
    struct StreamDeleter {
        /// Delete stream, unless it's std::cout
        void operator()(std::ostream * ptr) const {
            if(ptr != &std::cout) delete ptr;
        }
    };
    typedef std::unique_ptr<std::ostream, StreamDeleter> stream_unique_ptr;
}
#endif /* UTILITY */

